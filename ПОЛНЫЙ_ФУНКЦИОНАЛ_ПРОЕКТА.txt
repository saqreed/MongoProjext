=================================================
ПОЛНЫЙ ФУНКЦИОНАЛ ПРОЕКТА "СИСТЕМА УПРАВЛЕНИЯ КОМПАНИЕЙ"
=================================================

ПРЕДИСЛОВИЕ
-----------

Данный документ содержит полное техническое описание веб-приложения "Система управления компанией", 
разработанного с использованием современного стека технологий: Node.js, Express.js, MongoDB, HTML5, 
CSS3, JavaScript и Bootstrap 5. 

Проект представляет собой полноценную систему управления данными компании с трёхуровневой системой 
доступа пользователей, реализацией CRUD операций для всех основных сущностей, системой отчётности 
с функциями агрегации MongoDB и современным пользовательским интерфейсом.

Система спроектирована с учётом принципов безопасности, производительности и масштабируемости, 
используя JWT аутентификацию, хеширование паролей, индексы базы данных для оптимизации запросов 
и RESTful API архитектуру.

=================================================

СОДЕРЖАНИЕ
----------

1. АРХИТЕКТУРА И ТЕХНОЛОГИИ
2. БАЗА ДАННЫХ И КОЛЛЕКЦИИ  
3. СИСТЕМА АУТЕНТИФИКАЦИИ И АВТОРИЗАЦИИ
4. BACKEND API ENDPOINTS
5. FRONTEND ФУНКЦИОНАЛЬНОСТЬ
6. СИСТЕМА ОТЧЁТНОСТИ
7. БЕЗОПАСНОСТЬ И ОПТИМИЗАЦИЯ
8. ПОЛЬЗОВАТЕЛЬСКИЕ РОЛИ И ПРАВА ДОСТУПА

=================================================

1. АРХИТЕКТУРА И ТЕХНОЛОГИИ
---------------------------

1.1 Технологический стек:
- Backend: Node.js + Express.js
- База данных: MongoDB
- Frontend: HTML5, CSS3, JavaScript, Bootstrap 5
- Аутентификация: JWT (JSON Web Tokens)
- Шифрование: bcrypt для хеширования паролей
- API: RESTful архитектура

1.2 Структура проекта:
- server.js - основной серверный файл
- public/ - статические файлы (HTML, CSS, JS)
- package.json - зависимости и скрипты
- .env - переменные окружения

=================================================

2. БАЗА ДАННЫХ И КОЛЛЕКЦИИ
--------------------------

2.1 База данных: company_db

2.2 Коллекции:

a) USERS (пользователи системы):
{
  "_id": ObjectId,
  "username": String,
  "password": String (хешированный),
  "permissions": Array ["read", "write", "admin"]
}

b) EMPLOYEES (сотрудники):
{
  "_id": ObjectId,
  "name": String,
  "position": String,
  "department": String,
  "salary": Number,
  "email": String,
  "phone": String,
  "skills": Array,
  "hireDate": Date
}

c) PROJECTS (проекты):
{
  "_id": ObjectId,
  "name": String,
  "description": String,
  "status": String,
  "budget": Number,
  "department": String,
  "startDate": Date,
  "endDate": Date,
  "manager": String
}

d) DEPARTMENTS (отделы):
{
  "_id": ObjectId,
  "name": String,
  "location": String,
  "manager": String,
  "budget": Number,
  "employeeCount": Number
}

2.3 Индексы для оптимизации:

Employees:
- name: 1
- department: 1  
- position: 1
- salary: 1
- email: 1 (уникальный)

Projects:
- name: 1
- status: 1
- department: 1
- startDate: 1, endDate: 1

Departments:
- name: 1 (уникальный)
- location: 1

Users:
- username: 1 (уникальный)

=================================================

3. СИСТЕМА АУТЕНТИФИКАЦИИ И АВТОРИЗАЦИИ
---------------------------------------

3.1 Пользователи системы:

a) ADMIN (Администратор):
   - Логин: admin
   - Пароль: admin123
   - Права: ["read", "write", "admin"]
   - Доступ: Полный CRUD для всех сущностей

b) MANAGER (Менеджер):
   - Логин: manager  
   - Пароль: manager123
   - Права: ["read", "write"]
   - Доступ: Чтение и изменение данных

c) VIEWER (Просмотрщик):
   - Логин: viewer
   - Пароль: viewer123
   - Права: ["read"]
   - Доступ: Только чтение данных

3.2 Middleware аутентификации:

```javascript
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Токен доступа отсутствует' });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ error: 'Недействительный токен' });
    req.user = user;
    next();
  });
};
```

3.3 Middleware проверки прав:

```javascript
const checkPermission = (requiredPermission) => {
  return (req, res, next) => {
    if (!req.user.permissions.includes(requiredPermission) && 
        !req.user.permissions.includes('admin')) {
      return res.status(403).json({ error: 'Недостаточно прав для выполнения операции' });
    }
    next();
  };
};
```

=================================================

4. BACKEND API ENDPOINTS
------------------------

4.1 АУТЕНТИФИКАЦИЯ

POST /api/auth/login - Вход в систему

```javascript
app.post('/api/auth/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await db.collection('users').findOne({ username });
    
    if (!user || !await bcrypt.compare(password, user.password)) {
      return res.status(401).json({ error: 'Неверные учетные данные' });
    }

    const token = jwt.sign(
      { userId: user._id, username: user.username, permissions: user.permissions },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );

    res.json({ token, user: { username: user.username, permissions: user.permissions } });
  } catch (error) {
    res.status(500).json({ error: 'Ошибка сервера' });
  }
});
```

4.2 СОТРУДНИКИ (EMPLOYEES)

GET /api/employees - Получение всех сотрудников:
```javascript
app.get('/api/employees', authenticateToken, checkPermission('read'), async (req, res) => {
  try {
    const employees = await db.collection('employees').find({}).toArray();
    res.json(employees);
  } catch (error) {
    res.status(500).json({ error: 'Ошибка получения сотрудников' });
  }
});
```

POST /api/employees - Добавление сотрудника:
```javascript
app.post('/api/employees', authenticateToken, checkPermission('write'), async (req, res) => {
  try {
    const result = await db.collection('employees').insertOne(req.body);
    res.status(201).json({ message: 'Сотрудник добавлен', id: result.insertedId });
  } catch (error) {
    res.status(500).json({ error: 'Ошибка добавления сотрудника' });
  }
});
```

PUT /api/employees/:id - Обновление сотрудника:
```javascript
app.put('/api/employees/:id', authenticateToken, checkPermission('write'), async (req, res) => {
  try {
    const { ObjectId } = require('mongodb');
    const result = await db.collection('employees').updateOne(
      { _id: new ObjectId(req.params.id) },
      { $set: req.body }
    );
    res.json({ message: 'Сотрудник обновлен', modifiedCount: result.modifiedCount });
  } catch (error) {
    res.status(500).json({ error: 'Ошибка обновления сотрудника' });
  }
});
```

DELETE /api/employees/:id - Удаление сотрудника:
```javascript
app.delete('/api/employees/:id', authenticateToken, checkPermission('admin'), async (req, res) => {
  try {
    const { ObjectId } = require('mongodb');
    const result = await db.collection('employees').deleteOne({ _id: new ObjectId(req.params.id) });
    res.json({ message: 'Сотрудник удален', deletedCount: result.deletedCount });
  } catch (error) {
    res.status(500).json({ error: 'Ошибка удаления сотрудника' });
  }
});
```

4.3 ПРОЕКТЫ (PROJECTS)

GET /api/projects - Получение всех проектов:
```javascript
app.get('/api/projects', authenticateToken, checkPermission('read'), async (req, res) => {
  try {
    const projects = await db.collection('projects').find({}).toArray();
    res.json(projects);
  } catch (error) {
    res.status(500).json({ error: 'Ошибка получения проектов' });
  }
});
```

POST /api/projects - Добавление проекта:
```javascript
app.post('/api/projects', authenticateToken, checkPermission('write'), async (req, res) => {
  try {
    const result = await db.collection('projects').insertOne(req.body);
    res.status(201).json({ message: 'Проект добавлен', id: result.insertedId });
  } catch (error) {
    res.status(500).json({ error: 'Ошибка добавления проекта' });
  }
});
```

PUT /api/projects/:id - Обновление проекта:
```javascript
app.put('/api/projects/:id', authenticateToken, checkPermission('write'), async (req, res) => {
  try {
    const { ObjectId } = require('mongodb');
    const result = await db.collection('projects').updateOne(
      { _id: new ObjectId(req.params.id) },
      { $set: req.body }
    );
    res.json({ message: 'Проект обновлен', modifiedCount: result.modifiedCount });
  } catch (error) {
    res.status(500).json({ error: 'Ошибка обновления проекта' });
  }
});
```

DELETE /api/projects/:id - Удаление проекта:
```javascript
app.delete('/api/projects/:id', authenticateToken, checkPermission('admin'), async (req, res) => {
  try {
    const { ObjectId } = require('mongodb');
    const result = await db.collection('projects').deleteOne({ _id: new ObjectId(req.params.id) });
    res.json({ message: 'Проект удален', deletedCount: result.deletedCount });
  } catch (error) {
    res.status(500).json({ error: 'Ошибка удаления проекта' });
  }
});
```

4.4 ОТДЕЛЫ (DEPARTMENTS)

GET /api/departments - Получение всех отделов:
```javascript
app.get('/api/departments', authenticateToken, checkPermission('read'), async (req, res) => {
  try {
    const departments = await db.collection('departments').find({}).toArray();
    res.json(departments);
  } catch (error) {
    res.status(500).json({ error: 'Ошибка получения отделов' });
  }
});
```

POST /api/departments - Добавление отдела:
```javascript
app.post('/api/departments', authenticateToken, checkPermission('write'), async (req, res) => {
  try {
    const result = await db.collection('departments').insertOne(req.body);
    res.status(201).json({ message: 'Отдел добавлен', id: result.insertedId });
  } catch (error) {
    res.status(500).json({ error: 'Ошибка добавления отдела' });
  }
});
```

PUT /api/departments/:id - Обновление отдела:
```javascript
app.put('/api/departments/:id', authenticateToken, checkPermission('write'), async (req, res) => {
  try {
    const { ObjectId } = require('mongodb');
    const result = await db.collection('departments').updateOne(
      { _id: new ObjectId(req.params.id) },
      { $set: req.body }
    );
    res.json({ message: 'Отдел обновлен', modifiedCount: result.modifiedCount });
  } catch (error) {
    res.status(500).json({ error: 'Ошибка обновления отдела' });
  }
});
```

DELETE /api/departments/:id - Удаление отдела:
```javascript
app.delete('/api/departments/:id', authenticateToken, checkPermission('admin'), async (req, res) => {
  try {
    const { ObjectId } = require('mongodb');
    const result = await db.collection('departments').deleteOne({ _id: new ObjectId(req.params.id) });
    res.json({ message: 'Отдел удален', deletedCount: result.deletedCount });
  } catch (error) {
    res.status(500).json({ error: 'Ошибка удаления отдела' });
  }
});
```

4.5 ПОИСК И ФИЛЬТРАЦИЯ

GET /api/search/employees - Поиск сотрудников:
```javascript
app.get('/api/search/employees', authenticateToken, checkPermission('read'), async (req, res) => {
  try {
    const { name, department, position } = req.query;
    let query = {};
    
    if (name) query.name = { $regex: name, $options: 'i' };
    if (department) query.department = department;
    if (position) query.position = { $regex: position, $options: 'i' };
    
    const employees = await db.collection('employees').find(query).toArray();
    res.json(employees);
  } catch (error) {
    res.status(500).json({ error: 'Ошибка поиска сотрудников' });
  }
});
```

=================================================

5. FRONTEND ФУНКЦИОНАЛЬНОСТЬ
----------------------------

5.1 АУТЕНТИФИКАЦИЯ

Функция входа в систему:
```javascript
async function login(username, password) {
  try {
    const data = await apiRequest('/auth/login', {
      method: 'POST',
      body: { username, password }
    });
    
    authToken = data.token;
    currentUser = data.user;
    localStorage.setItem('authToken', authToken);
    localStorage.setItem('currentUser', JSON.stringify(currentUser));
    
    showMainApp();
    loadDashboard();
  } catch (error) {
    showAlert('loginAlert', error.message, 'danger');
  }
}
```

5.2 ЗАГРУЗКА DASHBOARD

```javascript
async function loadDashboard() {
  try {
    const [employees, projects, departments, salaryStats] = await Promise.all([
      apiRequest('/employees'),
      apiRequest('/projects'),
      apiRequest('/departments'),
      apiRequest('/reports/salary-statistics')
    ]);
    
    document.getElementById('employeesCount').textContent = employees.length;
    document.getElementById('projectsCount').textContent = projects.length;
    document.getElementById('departmentsCount').textContent = departments.length;
    document.getElementById('avgSalary').textContent = salaryStats.avgSalary ? 
      Math.round(salaryStats.avgSalary).toLocaleString() + ' ₽' : '-';
  } catch (error) {
    console.error('Error loading dashboard:', error);
  }
}
```

5.3 УПРАВЛЕНИЕ СОТРУДНИКАМИ

Загрузка списка сотрудников:
```javascript
async function loadEmployees() {
  const loading = document.getElementById('employeesLoading');
  const tableBody = document.getElementById('employeesTableBody');
  
  loading.style.display = 'block';
  
  try {
    const employees = await apiRequest('/employees');
    
    tableBody.innerHTML = employees.map(employee => `
      <tr>
        <td>
          <div class="d-flex align-items-center">
            <i class="fas fa-user-circle fa-2x text-primary me-2"></i>
            <div>
              <div class="fw-bold">${employee.name}</div>
              <small class="text-muted">${employee.email}</small>
            </div>
          </div>
        </td>
        <td><span class="badge bg-secondary">${employee.position}</span></td>
        <td>${employee.department}</td>
        <td class="fw-bold">${employee.salary.toLocaleString()} ₽</td>
        <td>${employee.email}</td>
        <td>
          <button class="btn btn-sm btn-outline-primary me-1" onclick="editEmployee('${employee._id}')">
            <i class="fas fa-edit"></i>
          </button>
          ${currentUser.permissions.includes('admin') ? `
            <button class="btn btn-sm btn-outline-danger" onclick="deleteEmployee('${employee._id}')">
              <i class="fas fa-trash"></i>
            </button>
          ` : ''}
        </td>
      </tr>
    `).join('');
    
  } catch (error) {
    showAlert('employeesAlert', error.message, 'danger');
  } finally {
    loading.style.display = 'none';
  }
}
```

Добавление нового сотрудника:
```javascript
async function addEmployee() {
  const form = document.getElementById('addEmployeeForm');
  const formData = new FormData(form);
  
  const employee = {
    name: formData.get('name'),
    position: formData.get('position'),
    department: formData.get('department'),
    salary: parseInt(formData.get('salary')),
    email: formData.get('email'),
    phone: formData.get('phone'),
    skills: formData.get('skills') ? formData.get('skills').split(',').map(s => s.trim()) : [],
    hireDate: new Date()
  };
  
  try {
    await apiRequest('/employees', {
      method: 'POST',
      body: employee
    });
    
    bootstrap.Modal.getInstance(document.getElementById('addEmployeeModal')).hide();
    form.reset();
    loadEmployees();
    showToast('Сотрудник успешно добавлен!', 'success');
  } catch (error) {
    showAlert('employeeModalAlert', error.message, 'danger');
  }
}
```

5.4 ПОИСК И ФИЛЬТРАЦИЯ

```javascript
async function searchEmployees() {
  const name = document.getElementById('searchEmployees').value;
  const department = document.getElementById('filterDepartment').value;
  const position = document.getElementById('filterPosition').value;
  
  const params = new URLSearchParams();
  if (name) params.append('name', name);
  if (department) params.append('department', department);
  if (position) params.append('position', position);
  
  try {
    const employees = await apiRequest(`/search/employees?${params.toString()}`);
    updateEmployeesTable(employees);
  } catch (error) {
    console.error('Error searching employees:', error);
  }
}
```

5.5 УПРАВЛЕНИЕ ПРОЕКТАМИ

Загрузка проектов:
```javascript
async function loadProjects() {
  try {
    const projects = await apiRequest('/projects');
    const container = document.getElementById('projectsContainer');
    
    container.innerHTML = projects.map(project => `
      <div class="col-md-6 col-lg-4">
        <div class="card h-100">
          <div class="card-body">
            <h5 class="card-title">${project.name}</h5>
            <p class="card-text">${project.description}</p>
            <span class="badge bg-${getStatusColor(project.status)}">${project.status}</span>
            <p class="mt-2"><strong>Бюджет:</strong> ${project.budget.toLocaleString()} ₽</p>
            <p><strong>Отдел:</strong> ${project.department}</p>
          </div>
          <div class="card-footer">
            <button class="btn btn-sm btn-primary" onclick="editProject('${project._id}')">
              Редактировать
            </button>
            ${currentUser.permissions.includes('admin') ? `
              <button class="btn btn-sm btn-danger" onclick="deleteProject('${project._id}')">
                Удалить
              </button>
            ` : ''}
          </div>
        </div>
      </div>
    `).join('');
  } catch (error) {
    console.error('Error loading projects:', error);
  }
}
```

=================================================

6. СИСТЕМА ОТЧЁТНОСТИ
--------------------

6.1 ОТЧЁТ "СОТРУДНИКИ ПО ОТДЕЛАМ"

GET /api/reports/employees-by-department:
```javascript
app.get('/api/reports/employees-by-department', authenticateToken, checkPermission('read'), async (req, res) => {
  try {
    const report = await db.collection('employees').aggregate([
      {
        $group: {
          _id: '$department',
          count: { $sum: 1 },
          avgSalary: { $avg: '$salary' },
          employees: { $push: { name: '$name', position: '$position' } }
        }
      },
      { $sort: { count: -1 } }
    ]).toArray();
    res.json(report);
  } catch (error) {
    res.status(500).json({ error: 'Ошибка генерации отчета' });
  }
});
```

Функциональность:
- Группировка сотрудников по отделам
- Подсчет количества сотрудников в каждом отделе  
- Расчет средней зарплаты по отделам
- Сортировка по количеству сотрудников

6.2 ОТЧЁТ "ПРОЕКТЫ ПО СТАТУСАМ"

GET /api/reports/projects-by-status:
```javascript
app.get('/api/reports/projects-by-status', authenticateToken, checkPermission('read'), async (req, res) => {
  try {
    const report = await db.collection('projects').aggregate([
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 },
          totalBudget: { $sum: '$budget' },
          projects: { $push: { name: '$name', budget: '$budget' } }
        }
      }
    ]).toArray();
    res.json(report);
  } catch (error) {
    res.status(500).json({ error: 'Ошибка генерации отчета' });
  }
});
```

Функциональность:
- Группировка проектов по статусам
- Подсчет количества проектов в каждом статусе
- Расчет общего бюджета по статусам
- Список проектов для каждого статуса

6.3 ОТЧЁТ "СТАТИСТИКА ЗАРПЛАТ"

GET /api/reports/salary-statistics:
```javascript
app.get('/api/reports/salary-statistics', authenticateToken, checkPermission('read'), async (req, res) => {
  try {
    const report = await db.collection('employees').aggregate([
      {
        $group: {
          _id: null,
          avgSalary: { $avg: '$salary' },
          minSalary: { $min: '$salary' },
          maxSalary: { $max: '$salary' },
          totalEmployees: { $sum: 1 }
        }
      }
    ]).toArray();
    res.json(report[0] || {});
  } catch (error) {
    res.status(500).json({ error: 'Ошибка генерации отчета' });
  }
});
```

Функциональность:
- Расчет средней зарплаты
- Поиск минимальной зарплаты
- Поиск максимальной зарплаты  
- Подсчет общего количества сотрудников

=================================================

7. БЕЗОПАСНОСТЬ И ОПТИМИЗАЦИЯ
-----------------------------

7.1 БЕЗОПАСНОСТЬ

a) JWT аутентификация:
- Токены с истечением срока действия (24 часа)
- Подпись токенов секретным ключом
- Проверка токена на каждом защищенном маршруте

b) Хеширование паролей:
- Использование bcrypt для хеширования
- Соль для дополнительной защиты
- Сравнение хешей при аутентификации

c) Контроль доступа:
- Трёхуровневая система прав (read, write, admin)
- Проверка прав на каждом маршруте
- Middleware для авторизации

7.2 ОПТИМИЗАЦИЯ

a) Индексы базы данных:
- Индексы на часто используемые поля
- Уникальные индексы для предотвращения дублирования
- Составные индексы для сложных запросов

b) Агрегационные запросы:
- Использование MongoDB aggregation pipeline
- Оптимизированные запросы для отчетов
- Группировка и сортировка на уровне БД

=================================================

8. ПОЛЬЗОВАТЕЛЬСКИЕ РОЛИ И ПРАВА ДОСТУПА
---------------------------------------

8.1 ADMIN (Администратор):
- Полный доступ ко всем функциям
- CRUD операции для всех сущностей
- Удаление данных
- Доступ ко всем отчетам
- Управление пользователями

8.2 MANAGER (Менеджер):
- Чтение всех данных
- Создание и редактирование записей
- Доступ к отчетам
- Ограничен в удалении данных

8.3 VIEWER (Просмотрщик):
- Только чтение данных
- Просмотр отчетов
- Поиск и фильтрация
- Без прав на изменение данных

=================================================

ЗАКЛЮЧЕНИЕ
----------

Система "Управление компанией" представляет собой полнофункциональное веб-приложение 
с современной архитектурой, обеспечивающее безопасное и эффективное управление 
данными компании через удобный веб-интерфейс с трёхуровневой системой доступа.

================================================= 